{"version":3,"sources":["img/kitty.gif","features/play/YouWonScreen/style.module.css","img/keanu.gif","features/play/Player/index.js","constants/directions.js","features/play/Enemy/index.js","features/play/YouWonScreen/index.js","features/play/Board/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","background","move","coordinates","direction","Object","objectSpread","y","x","Player","_ref","newDirection","detectCollision","_useState","useState","_useState2","slicedToArray","setCoordinates","timer","clearTimeout","setTimeout","newCoordinates","style","position","top","left","react_default","a","createElement","width","src","kitty","alt","Enemy","letter","YouWonScreen","className","styles","Keanu","getRandomInt","Math","floor","random","enemies","message","slice","map","shift","generateEnemies","enemy","Board","setDirection","_useState3","_useState4","gameFinished","setGameFinished","handlers","useSwipeable","onSwiped","eventData","translateSwipeDirection","dir","assign","height","backgroundColor","color","play_YouWonScreen","play_Enemy","play_Player","player","length","App","play_Board","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5af9fe74.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/kitty.27f4881f.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"style_background__2Cpnh\"};","module.exports = __webpack_public_path__ + \"static/media/keanu.d6011372.gif\";","import React, { useState } from \"react\";\nimport * as directions from \"../../../constants/directions\";\nimport kitty from \"../../../img/kitty.gif\";\n\nconst move = (coordinates, direction) => {\n  switch (direction) {\n    case directions.UP:\n      return { ...coordinates, y: (coordinates.y -= 1) };\n    case directions.DOWN:\n      return { ...coordinates, y: (coordinates.y += 1) };\n    case directions.LEFT:\n      return { ...coordinates, x: (coordinates.x -= 1) };\n    case directions.RIGHT:\n      return { ...coordinates, x: (coordinates.x += 1) };\n    default:\n      break;\n  }\n};\n\nconst Player = ({ x, y, newDirection, detectCollision }) => {\n  const [coordinates, setCoordinates] = useState({ x, y });\n  detectCollision(coordinates);\n  let timer = null;\n\n  if (timer) {\n    clearTimeout(timer);\n    timer = setTimeout(function() {\n      let newCoordinates = move(coordinates, newDirection);\n      setCoordinates(newCoordinates);\n    }, 5);\n  } else {\n    timer = setTimeout(function() {\n      let newCoordinates = move(coordinates, newDirection);\n      setCoordinates(newCoordinates);\n    }, 5);\n  }\n\n  const style = {\n    position: \"absolute\",\n    top: coordinates.y,\n    left: coordinates.x\n  };\n  return <img width=\"50\" src={kitty} style={style} alt=\"kitty\" />;\n};\n\nexport default Player;\n","export const UP = 0;\nexport const RIGHT = 1;\nexport const DOWN = 2;\nexport const LEFT = 3;\n","import React from \"react\";\n\nconst Enemy = ({ x, y, letter }) => {\n  const style = {\n    position: \"absolute\",\n    top: y,\n    left: x\n  };\n  return <div style={style}>{letter}</div>;\n};\n\nexport default Enemy;\n","import React from \"react\";\nimport styles from \"./style.module.css\";\nimport Keanu from \"../../../img/keanu.gif\";\n\nconst YouWonScreen = () => {\n  return (\n    <div className={styles.background}>\n      <h1>Feliz Cumpleaños Laurini!!!!</h1>\n      <img width=\"300\" src={Keanu} alt=\"Keanu bebe\" />\n      <h3>\n        Ya estas viejita, como keanu {\"\\u2728\"}\n        {\"<3\"}\n      </h3>\n    </div>\n  );\n};\n\nexport default YouWonScreen;\n","import React, { useState } from \"react\";\nimport { useSwipeable } from \"react-swipeable\";\nimport Player from \"../Player\";\nimport * as directions from \"../../../constants/directions\";\nimport Enemy from \"../Enemy\";\nimport YouWonScreen from \"../YouWonScreen\";\n\nconst translateSwipeDirection = direction => {\n  switch (direction) {\n    case \"Right\":\n      return directions.RIGHT;\n    case \"Left\":\n      return directions.LEFT;\n    case \"Down\":\n      return directions.DOWN;\n    case \"Up\":\n      return directions.UP;\n    default:\n      return;\n  }\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * Math.floor(300));\n};\n\nconst generateEnemies = () => {\n  const message = [\n    \"F\",\n    \"e\",\n    \"l\",\n    \"i\",\n    \"z\",\n    \"C\",\n    \"u\",\n    \"m\",\n    \"p\",\n    \"l\",\n    \"e\",\n    \"a\",\n    \"ñ\",\n    \"o\",\n    \"s\"\n  ];\n  return message.slice().map(letter => {\n    return {\n      x: getRandomInt(),\n      y: getRandomInt(),\n      letter: message.shift()\n    };\n  });\n};\n\nconst enemies = generateEnemies();\n\nlet enemy = enemies.shift();\n\nconst Board = () => {\n  const [direction, setDirection] = useState(directions.UP);\n  const [gameFinished, setGameFinished] = useState(false);\n\n  const detectCollision = player => {\n    if (\n      player.x >= enemy.x - 50 &&\n      player.x <= enemy.x + 10 &&\n      player.y >= enemy.y - 50 &&\n      player.y <= enemy.y + 10\n    ) {\n      if (enemies.length > 0) {\n        enemy = enemies.shift();\n      } else {\n        setGameFinished(true);\n      }\n    }\n  };\n\n  const handlers = useSwipeable({\n    onSwiped: eventData => {\n      setDirection(translateSwipeDirection(eventData.dir));\n    }\n  });\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        width: \"100%\",\n        height: \"100%\",\n        backgroundColor: \"#ffbccf\",\n        color: \"white\"\n      }}\n      className=\"Board\"\n      {...handlers}\n    >\n      {gameFinished && <YouWonScreen />}\n      {!gameFinished && (\n        <div>\n          <Enemy {...enemy} />\n          <Player\n            x={50}\n            y={500}\n            newDirection={direction}\n            detectCollision={detectCollision}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n// import YouWonScreen from \"./features/play/YouWonScreen\";\nimport Board from \"./features/play/Board\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}